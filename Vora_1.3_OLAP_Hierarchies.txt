######################################
# SAP HANA VORA 1.3 OLAP HIERARCHIES #
######################################

su - cluster_admin

rm addresses.csv
rm hierarchy.csv
hdfs dfs -rm /user/cluster_admin/hierarchy.csv
hdfs dfs -rm /user/cluster_admin/addresses.csv

## id, name, pred, succ, ord
echo "1,Diane,0,1,1" >> hierarchy.csv
echo "2,Austin,1,2,1" >> hierarchy.csv
echo "3,Joe,1,3,2" >> hierarchy.csv
echo "4,Denys,3,4,1" >> hierarchy.csv
echo "5,Jamie,3,5,2" >> hierarchy.csv
echo "6,Julie,3,6,3" >> hierarchy.csv
echo "7,Bob,3,7,4" >> hierarchy.csv
echo "8,Phil,3,8,5" >> hierarchy.csv
 
echo "1,Philly" >> addresses.csv
echo "2,Palo Alto" >> addresses.csv
echo "3,San Francisco" >> addresses.csv
echo "4,Den Bosch" >> addresses.csv
echo "5,Vancouver" >> addresses.csv
echo "6,Seattle" >> addresses.csv
echo "7,New York" >> addresses.csv
echo "8,Paris" >> addresses.csv

hdfs dfs -ls /user/cluster_admin/
hdfs dfs -put /home/cluster_admin/hierarchy.csv
hdfs dfs -put /home/cluster_admin/addresses.csv
hdfs dfs -ls /user/cluster_admin/
hdfs dfs -cat /user/cluster_admin/hierarchy.csv
hdfs dfs -cat /user/cluster_admin/addresses.csv

drop table HIERARCHY_TABLE;
create table HIERARCHY_TABLE
(ID integer, NAME varchar(200), PRED integer, SUCC integer, ORD integer) 
using com.sap.spark.vora 
options (files "/user/cluster_admin/hierarchy.csv");

select * from hierarchy_table;

drop table ADDRESSES;
create temporary table ADDRESSES
(ID integer, ADDRESS varchar(200)) 
using com.sap.spark.vora 
options (files "/user/cluster_admin/addresses.csv");

select * from addresses;

select name, is_root(node) from hierarchy (
using hierarchy_table as v
join prior u on v.pred = u.succ
order siblings by ord asc
start where pred = 0
set node
) as h;

select name, level(node) as level from hierarchy (
using hierarchy_table as v
join prior u on v.pred = u.succ
order siblings by ord asc
start where pred = 0
set node)
as h;

select b.id, b.name, a.address, b.level
from
(select id, name, level(node) as level from hierarchy (
using hierarchy_table as v
join prior u on v.pred = u.succ
order siblings by ord asc
start where pred = 0
set node)
as h) b, addresses a
where b.id = a.id;

drop view hv cascade;
create view hv as select id, name, node from hierarchy 
(using hierarchy_table as v
join prior u on v.pred = u.succ
order siblings by ord asc
start where pred = 0
set node)
as h;

select * from hierarchy_table;

select name(node) as nodename from hv;

select name, level(node) as level from hv;

select name, is_root(node) as isroot from hv;

select name, is_root(node) as isroot from hv where is_root(node) = true;

# hierarchy self-join to get descendant
select a.name, b.name from hv a, hv b where is_descendant(a.node, b.node);

# hierarchy self-join to get descendant or self
select a.name, b.name from hv a, hv b where is_descendant_or_self(a.node, b.node);

# hierarchy self-join to get ancestor
select a.name, b.name from hv a, hv b where is_ancestor(a.node, b.node);

# hierarchy self-join to get ancestor or self
select a.name, b.name from hv a, hv b where is_ancestor_or_self(a.node, b.node);

# hierarchy self-join to get parent
select a.name, b.name from hv a, hv b where is_parent(a.node, b.node);

# hierarchy self-join to get children
select a.name, b.name from hv a, hv b where is_child(a.node, b.node);

# hierarchy self-join to get sibling
select a.name, b.name from hv a, hv b where is_sibling(a.node, b.node);

# hierarchy self-join to get following
select a.name, b.name from hv a, hv b where is_following(a.node, b.node);

# hierarchy self-join to get preceding
select a.name, b.name from hv a, hv b where is_preceding(a.node, b.node);

# build address_hv view

select * from addresses;

# simple join of hierarchy view with another table
select a.name, b.address from hv a, addresses b where a.id = b.id;
.. or ..
select name, address from addresses_hv;

# get ids of the children of the root.
select hv2.id as child from hv hv1, hv hv2 where is_child(hv2.node, hv1.node) and is_root(node);
.. or ..
select ahv2.id as child from addresses_hv ahv1, addresses_hv ahv2 where is_child(ahv2.node, ahv1.node) and is_root(ahv1.node);

# get addresses of the children of the root.
select b.address from (select hv2.id as child from hv hv1, hv hv2 where is_child(hv2.node, hv1.node) and is_root(hv1.node)) a, addresses b where a.child = b.id;
.. or ..
select b.address from (select ahv2.id as child from addresses_hv ahv1, addresses_hv ahv2 where is_child(ahv2.node, ahv1.node) and is_root(ahv1.node)) a, addresses b where a.child = b.id;

# get names and addresses of 2nd level employees
select a.name, b.address from hv a, addresses b where a.id = b.id and level(a.node) = 2;
.. or ..
select name, address from addresses_hv where level(node) = 2;

# get names and addresses of 3rd level employees
select a.name, b.address from hv a, addresses b where a.id = b.id and level(a.node) = 3;
.. or ..
select name, address from addresses_hv where level(node) = 3;
